package(default_visibility = ["//visibility:public"])

load("@io_bazel_rules_sass//:defs.bzl", "multi_sass_binary", "sass_binary", "sass_library")

load("@npm//@bazel/typescript:index.bzl", "ts_library", "ts_devserver")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")

sass_library(
  name = "angular_material_theming",
  srcs = [
    "@npm//:node_modules/@angular/material/_theming.scss",
  ],
)

sass_binary(
  name = "global-styles",
  src = "styles.scss",
  deps = [
    ":angular_material_theming"
  ]
)

sass_binary(
    name = "app-styles",
    src = "app/app.component.scss",
)

ts_library(
    use_angular_plugin = True,
    name = "src",
    srcs = glob(
        ["**/*.ts"],
        exclude = ["**/*.spec.ts", "**/_stories/**", "test.ts"],
    ),
    angular_assets = [
        ":app-styles",
    ] + glob(["**/*.html"]),
    # don't include a module_name at the app level, or js won't properly run on serve
    # module_name = "@literalpie/my-app",
    deps = [
        "@npm//@angular/common",
        "@npm//@angular/platform-browser-dynamic",
        "@npm//@angular/platform-browser",
        "@npm//@angular/core",
        "@npm//rxjs",
        "//projects/my-lib/src",
    ],
)

# Files that we serve in both development and production
_ASSETS = [
    # This label references an output of the "global-styles" sass_binary above.
    # it comes from the name of the input file
    ":styles.css",

    # We load zone.js outside the bundle. That's because it's a "pollyfill"
    # which speculates that such features might be available in a browser.
    # Also it's tricky to configure dead code elimination to understand that
    # zone.js is used, given that we don't have any import statement that
    # imports from it.
    "@npm//:node_modules/zone.js/dist/zone.min.js",
]


filegroup(
    name = "rxjs_umd_modules",
    srcs = [
        ":rxjs_shims.js",
        "@npm//:node_modules/rxjs/bundles/rxjs.umd.js",
    ],
)

html_insert_assets(
    name = "inject_scripts_for_dev",
    outs = ["index.html"],
    args = [
        "--html=$(execpath //projects/my-app/src:test/index.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS] + [
        # This file doesn't exist during the build, but will be served by ts_devserver
        "./_/ts_scripts.js",
    ],
    data = ["//projects/my-app/src:test/index.html"] + _ASSETS,
)

ts_devserver(
    name = "devserver",
    # Serve src/example/index.html at /index.html
    additional_root_paths = ["src/example"],
    # Run the program from the development version of the main
    entry_module = "angular_ten_bazel_workspace/projects/my-app/src/main.dev",
    # These scripts will be included in the JS bundle after require.js
    # They should have only named UMD modules, or require.js will throw.
    scripts = [
        "@npm//:node_modules/tslib/tslib.js",
        # Even though an error is thrown on run, this works, and is necessary.
        ":rxjs_umd_modules",
        # We are manaully adding the bazel generated named-UMD date-fns bundle here as
        # named-UMD bundles for non-APF npm packages are not yet automatically added.
        # This file is generated by the npm_umd_bundle @npm//date-fns:date-fns__umd
        # rule that is setup by yarn_install.
        # "@npm//date-fns:date-fns.umd.js",
    ],
    # Serve these files in addition to the JavaScript bundle
    static_files = _ASSETS + [
      ":inject_scripts_for_dev"
    ],
    # Tell Bazel to build the sources first
    deps = [":src"],
)
